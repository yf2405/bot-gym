require('dotenv').config();
const { createBot, createProvider, createFlow, addKeyword } = require('@bot-whatsapp/bot');
const QRPortalWeb = require('@bot-whatsapp/portal');
const BaileysProvider = require('@bot-whatsapp/provider/baileys');
const MongoAdapter = require('@bot-whatsapp/database/mongo');

const response = {
    menu: [
        'üîπ‚úç Escribe un n√∫mero de las opciones para una respuesta r√°pida:',
        'üëâ *1* Informaci√≥n sobre precios y Horarios',
        'üëâ *2* Clases y actividades',
        'üëâ *3* Servicios adicionales',
        'üëâ *4* Direcci√≥n para saber d√≥nde estamos ubicados',
    ],
    info: [
        'üìä *Precios:*',
        'üí™ Mensualidad para 1 persona: 70,000 COP.',
        '',
        'üèãüèΩ‚Äç‚ôÇÔ∏èüèãüèΩ Mensualidad para 2 personas: 65,000 COP cada uno.',
        '',
        '‚ö° Mensualidad para 3 o m√°s personas: 60,000 COP cada uno.',
        '',
        'üî± 15 d√≠as: 40,000 COP.',
        '',
        'üî± Semana: 30,000 COP.',
        '',
        'üî± Clase individual: 8,000 COP',
        '',
        '‚û°Ô∏è ¬øTe gustar√≠a m√°s informaci√≥n sobre clases y Actividades? Oprime *2*.',
        '',
        '‚û°Ô∏è Servicios adicionales 3.',
        '',
        '‚û°Ô∏è Direcci√≥n: Oprime *4*.'
    ],
    class: [
        'üî•üí™üèºüéß',
        'üìÖ *Clases y actividades:*',
        '',
        'üèãüèΩ Clase de rumba: Lunes a las 7:15 pm.',
        '',
        'üèãüèΩ Clase de running y funcional: Martes a las 7:00 pm.',
        '',
        '‚û°Ô∏è ¬øTe gustar√≠a m√°s informaci√≥n sobre nuestros servicios adicionales? Oprime *3* o *1* para saber sobre precios.',
        '',
        '‚û°Ô∏è Direcci√≥n: Oprime *4*.'
    ],
    servicios: [
        'üíº *Servicios adicionales:*',
        'Escribe la palabra que est√° en color: (*negrita*) para obtener m√°s informaci√≥n:',
        '',
        '*Asesor√≠a*: Asesor√≠a nutricional personalizada.',
        '',
        '*Plan*: Plan personalizado de entrenamiento.',
        '',
        '*Venta*: Venta de suplementaci√≥n fitness.',
        '',
        'üîô Para regresar al men√∫ principal, escribe "menu".',
        '‚û°Ô∏è si quieres saber la Direcci√≥n: Oprime *4*.',
    ],
    direccion: [
        'üìç *Direcci√≥n:*',
        'Nos encontramos en [Corales manzana 46 casa #13 piso 2].',
        'üîô Para regresar al men√∫ principal, escribe "menu".'
    ]
};

const flowGracias = addKeyword(['gracias', 'muchas gracias', 'bueno', 'adios', 'thank you', 'thanks'])
    .addAnswer([
        'üòÉ ¬°Es un placer ayudarte!',
    ]);

const flowInfo = addKeyword(['1']).addAnswer(response.info);

const flowClases = addKeyword(['2']).addAnswer(response.class);

const flowService = addKeyword(['3']).addAnswer(response.servicios, { capture: true }, async (ctx, { fallBack, flowDynamic }) => {
    console.log(ctx); // Imprimir el contexto en la consola
    switch (ctx.body.toLowerCase()) {
        case 'asesor':
        case 'asesor√≠a nutricional personalizada':
            await flowDynamic('üçè En unos minutos te comunico con un asesor para la asesor√≠a nutricional personalizada.');
            break;
        case 'plan':
        case 'plan personalizado de entrenamiento':
            await flowDynamic('üèãÔ∏è En unos minutos te comunico con un asesor para el plan personalizado de entrenamiento.');
            break;
        case 'venta':
        case 'venta de suplementaci√≥n fitness':
            await flowDynamic('üíä En unos minutos te comunico con un asesor para la venta de suplementaci√≥n fitness.');
            break;
        default:
            return fallBack('‚ùå Respuesta no v√°lida, por favor selecciona una de las opciones.');
    }
    return true; // Para asegurar que la promesa devuelve algo
});

const flowDireccion = addKeyword(['4']).addAnswer(response.direccion);

const flowPrincipal = addKeyword(['hola', 'holi', 'buen dia', 'buen d√≠a', 'hola muy buen dia', 'hola muy buen d√≠a', 'hola buenos d√≠as', 'buenas tardes', 'que tal', 'cristian', 'hola cristian', 'parcero', 'mijo', 'buenas noches', 'disculpe buenas', 'buenos d√≠a', 'buenos dia', 'hola me interesa saber precios del gimnasio', 'hola me interesa saber precios del gym', 'que tal'])
    .addAnswer('üòÉ ¬°Hola! ¬øC√≥mo va todo? Bienvenido/a al Gimnasio *Desaf√≠o Fitness corales*. ¬øEn qu√© puedo apoyarte hoy?',)
    .addAnswer(response.menu);

const menuFlow = addKeyword(['menu'])
    .addAnswer(response.menu, { capture: true }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
        if (!["1", "2", "3", "4"].includes(ctx.body)) {
            return fallBack("‚ùå Respuesta no v√°lida, por favor selecciona una de las opciones.");
        }
        switch (ctx.body) {
            case "1":
                return gotoFlow(flowInfo);
            case "2":
                return gotoFlow(flowClases);
            case "3":
                return gotoFlow(flowService);
            case "4":
                return gotoFlow(flowDireccion);
            default:
                return await flowDynamic("üîö Saliendo... Puedes volver a acceder a este men√∫ escribiendo 'menu'.");
        }
    });

const main = async () => {
    const adapterDB = new MongoAdapter({
        dbUri: process.env.MONGODB_URI,  // Utiliza la variable de entorno aqu√≠
        dbName: "GymBot"
    });
    const adapterFlow = createFlow([flowPrincipal, menuFlow, flowInfo, flowClases, flowService, flowDireccion, flowGracias]);
    const adapterProvider = createProvider(BaileysProvider);

    createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    });

    QRPortalWeb();
};

main();
